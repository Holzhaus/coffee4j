package de.rwth.swc.coffee4j.engine.report;

import de.rwth.swc.coffee4j.engine.configuration.model.Combination;
import de.rwth.swc.coffee4j.engine.configuration.model.InputParameterModel;
import de.rwth.swc.coffee4j.engine.report.ExecutionReporter;
import de.rwth.swc.coffee4j.algorithmic.interleaving.InterleavingCombinatorialTestGroup;

import java.util.Map;
import java.util.Set;

/**
 * Interface each Execution Reporter for Interleaving CT must implement.
 *
 * <p>
 *     {@link InputParameterModel}-based equivalent to an
 *     {@link de.rwth.swc.coffee4j.algorithmic.interleaving.report.InterleavingGenerationReporter}.
 * </p>
 */
public interface InterleavingExecutionReporter extends ExecutionReporter {
    /**
     * Called when a new {@link InterleavingCombinatorialTestGroup} has been generated by an
     * {@link de.rwth.swc.coffee4j.algorithmic.interleaving.manager.InterleavingCombinatorialTestManager}.
     *
     * @param group stores all important information for the execution of interleaving combinatorial testing.
     */
    default void interleavingGroupGenerated(InterleavingCombinatorialTestGroup group){}

    /**
     * Called when the interleaving combinatorial testing has finished.
     *
     * @param group stores all important information for the execution of interleaving combinatorial testing.
     * @param exceptionInducingCombinations combinations that need to be modelled as error-constraints.
     * @param possiblyFailureInducingCombinations combinations that trigger faults in the SUT.
     */
    default void interleavingGroupFinished(InterleavingCombinatorialTestGroup group,
                                  Map<Combination, Class<? extends Throwable>> exceptionInducingCombinations,
                                  Set<Combination> possiblyFailureInducingCombinations){}

    /**
     * Called when the identification phase for a failing test input has started.
     *
     * @param group stores all important information for the execution of interleaving combinatorial testing.
     * @param failingTestInput test input for which the failure-inducing/error-combinations should be identified.
     */
    default void identificationStarted(InterleavingCombinatorialTestGroup group,
                                       Combination failingTestInput){}

    /**
     * Called when the identification phase for a failing test input has finished.
     *
     * @param group stores all important information for the execution of interleaving combinatorial testing.
     * @param exceptionInducingCombinations all found combinations that must be modeled as error-constraints.
     * @param possiblyFailureInducingCombinations all found (possibly) failure-inducing combinations causing the test
     *                                            input to fail.
     */
    default void identificationFinished(InterleavingCombinatorialTestGroup group,
                                        Set<Combination> exceptionInducingCombinations,
                                        Set<Combination> possiblyFailureInducingCombinations){}

    /**
     * Called when a new test input was generated during identification phase.
     *
     * @param group stores all important information for the execution of interleaving combinatorial testing.
     * @param testInput the newly generated test input.
     */
    default void identificationTestInputGenerated(InterleavingCombinatorialTestGroup group,
                                                  Combination testInput){}

    /**
     * Called when the checking phase for a combination has started.
     *
     * @param group stores all important information for the execution of interleaving combinatorial testing.
     * @param combinationToCheck the combination to be checked.
     */
    default void checkingStarted(InterleavingCombinatorialTestGroup group,
                                 Combination combinationToCheck){}

    /**
     * Called when the checking phase for a combination has finished.
     *
     * @param group stores all important information for the execution of interleaving combinatorial testing.
     * @param combinationToCheck the combination that has been checked.
     * @param passed true iff combination is (most-likely) an error-combination/failure-inducing combination.
     */
    default void checkingFinished(InterleavingCombinatorialTestGroup group,
                                  Combination combinationToCheck,
                                  boolean passed){}
}
