package de.rwth.swc.coffee4j.engine.report;

import de.rwth.swc.coffee4j.algorithmic.report.ArgumentConverter;
import de.rwth.swc.coffee4j.algorithmic.sequential.report.GenerationReporter;
import de.rwth.swc.coffee4j.algorithmic.sequential.characterization.FaultCharacterizationAlgorithm;
import de.rwth.swc.coffee4j.algorithmic.sequential.generator.TestInputGroup;
import de.rwth.swc.coffee4j.algorithmic.sequential.generator.TestInputGroupGenerator;
import de.rwth.swc.coffee4j.engine.configuration.TestInputGroupContext;
import de.rwth.swc.coffee4j.engine.configuration.model.Combination;
import de.rwth.swc.coffee4j.engine.configuration.model.InputParameterModel;

import java.util.Collection;
import java.util.List;
import java.util.Map;

/**
 * The {@link InputParameterModel}-based equivalent to a
 * {@link GenerationReporter}.
 * Instead of {@link TestInputGroup}s this uses {@link TestInputGroupContext}s so
 * that identifies can be converted using {@link ArgumentConverter}s. Additionally,
 * this means that all test inputs are converted into a sensible format ({@link Combination}).
 * <p>
 * The method in this class can be split into three categories. The first one deals with all lifecycle events
 * from {@link TestInputGroupContext}s. The second one with actual execution of test inputs, and the third one with
 * event reporting capabilities. Actual test execution reporting is not done per {@link TestInputGroupContext}, as
 * caching results in some tests getting executed for multiple {@link TestInputGroupContext}s.
 * <p>
 * All methods have empty default implementations so that each implementing class can choose what methods to
 * override.
 */
public interface SequentialExecutionReporter extends ExecutionReporter {
    
    /**
     * Called if a new {@link TestInputGroup} has been generated by a
     * {@link TestInputGroupGenerator}. The generator is given inside
     * the {@link TestInputGroupContext}.
     *
     * @param context    all important information about one group
     * @param testInputs the initially generated test inputs
     */
    default void testInputGroupGenerated(TestInputGroupContext context, List<Combination> testInputs) {
        // empty
    }
    
    /**
     * Called if a {@link TestInputGroup} has completely finished. This means
     * fault characterization is finished (if it was enabled), and no more methods in this class will be called in
     * reference to this context.
     *
     * @param context the context of the group which was finished
     */
    default void testInputGroupFinished(TestInputGroupContext context) {
        // empty
    }
    
    /**
     * Called if a fault characterization started for a {@link TestInputGroup}.
     * The process will end again when {@link #faultCharacterizationFinished(TestInputGroupContext, Map, Collection)} is
     * called.
     *
     * @param context   the context of the group for which fault characterization started
     * @param algorithm the algorithm which will be used to characterize faults. This is a reference to the real
     *                  algorithm. Do not modify as this will most likely have unintended side effects
     */
    default void faultCharacterizationStarted(TestInputGroupContext context, FaultCharacterizationAlgorithm algorithm) {
        // empty
    }
    
    /**
     * Called if fault characterization for a {@link TestInputGroup} is completely
     * finished. This means {@link #faultCharacterizationTestInputsGenerated(TestInputGroupContext, List)} will never
     * be called again for this context, and soon after this method {@link #testInputGroupFinished(TestInputGroupContext)}
     * is called.
     *
     * @param context                     the context of the group for which fault characterization finished
     * @param exceptionInducingCombinations           all found exception-inducing combinations
     * @param possiblyFailureInducingCombinations all possibly failure-inducing combinations found. The order may or may not be based
     *                                            on an algorithm internal probability metric of the combinations being
     *                                            failure-inducing
     */
    default void faultCharacterizationFinished(TestInputGroupContext context,
                                               Map<Combination, Class<? extends Throwable>> exceptionInducingCombinations,
                                               Collection<Combination> possiblyFailureInducingCombinations) {
        // empty
    }
    
    /**
     * Called if additional test inputs for the fault characterization process of one
     * {@link TestInputGroup} have been generated by the algorithm given to
     * {@link #faultCharacterizationStarted(TestInputGroupContext, FaultCharacterizationAlgorithm)}. This method can only be
     * called (multiple times) between calls to
     * {@link #faultCharacterizationStarted(TestInputGroupContext, FaultCharacterizationAlgorithm)} and
     * {@link #faultCharacterizationFinished(TestInputGroupContext, Map, Collection)}.
     *
     * @param context    the context of the group for which additional test inputs were generated
     * @param testInputs all additionally generated test inputs
     */
    default void faultCharacterizationTestInputsGenerated(TestInputGroupContext context, List<Combination> testInputs) {
        // empty
    }
}
